//
//  MessagesViewController.swift
//  Seta Final MessagesExtension
//
//  Created by Ian Costello on 3/13/18.
//  Copyright Â© 2018 Bridge. All rights reserved.
//

import UIKit
import Messages
import AVFoundation

class MessagesViewController: MSMessagesAppViewController {
    
    var audioPlayer = AVAudioPlayer()
    var audioPlayer2 = AVAudioPlayer()
    var audioPlayer3 = AVAudioPlayer()
    var playerNumber = 1
    
    @IBOutlet weak var BGCycle: UIButton!
    let BGNames =
        ["Strawberry2", "Orange", "Banana", "Melon", "Berry", "Grape", "Pineapple", "Watermelon", "Kiwi", "Kiwi3"]
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        if UserDefaults.standard.object(forKey: "currentBG") == nil {
            UserDefaults.standard.set(0, forKey: "currentBG")
        }
        if (UserDefaults.standard.object(forKey: "currentBG") as! Int >= BGNames.count) {
            UserDefaults.standard.set(0, forKey: "currentBG")
        }
        self.view.backgroundColor = UIColor(patternImage: UIImage(named: BGNames[UserDefaults.standard.object(forKey: "currentBG") as! Int])!  )
        // Do any additional setup after loading the view.
        
        let buttonSFX = Bundle.main.path(forResource: "seta3", ofType: ".au")
        do {
            audioPlayer = try AVAudioPlayer(contentsOf: URL(fileURLWithPath: buttonSFX! ))
            try AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryAmbient)
            try AVAudioSession.sharedInstance().setActive(true)
        }
        catch{
            print(error)
        }
        do {
            audioPlayer2 = try AVAudioPlayer(contentsOf: URL(fileURLWithPath: buttonSFX! ))
            try AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryAmbient)
            try AVAudioSession.sharedInstance().setActive(true)
        }
        catch{
            print(error)
        }
        do {
            audioPlayer3 = try AVAudioPlayer(contentsOf: URL(fileURLWithPath: buttonSFX! ))
            try AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryAmbient)
            try AVAudioSession.sharedInstance().setActive(true)
        }
        catch{
            print(error)
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    
    
    @IBAction func BGCycleAction(_ sender: Any) {
        let incrementBG = (UserDefaults.standard.object(forKey: "currentBG") as! Int) + 1
        UserDefaults.standard.set(incrementBG, forKey: "currentBG")
        if incrementBG >= BGNames.count {
            UserDefaults.standard.set(0, forKey: "currentBG")
        }
        self.view.backgroundColor = UIColor(patternImage: UIImage(named: BGNames[UserDefaults.standard.object(forKey: "currentBG") as! Int])!)
        
        switch (playerNumber) {
        case 1:
            audioPlayer.play()
            playerNumber += 1
        case 2:
            audioPlayer2.play()
            playerNumber += 1
        case 3:
            audioPlayer3.play()
            playerNumber = 1
        default:
            playerNumber = 1
        }
        
    }
    
    
    
    
    
}
